// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/index.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xff\x8b\x1b\xc7\x15\xff\xb9\xf7\x57\xbc\xae\x13\x4b\xc2\x5a\xad\xee\xec\xa3\x41\xa7\x95\x29\x76\x08\x81\xd6\x36\xb5\xf3\x43\x29\xe5\x18\xed\x3e\xad\xe6\x34\x3b\xb3\x99\x99\x95\xac\x1e\x07\x49\x8b\xd3\x2f\xc4\x85\x36\xa1\x57\x8a\xa9\x4b\x21\x34\x84\xb6\x14\xea\x9a\x36\xa9\xc9\x3f\x63\xe9\xec\x9f\xfa\x2f\x94\xd9\x6f\xda\xd5\x69\x7d\xbe\x0b\x1c\xda\xdd\xf7\xe5\xf3\xde\xbc\xf7\x66\xde\x9b\xdb\xea\x7f\xfb\xe6\xed\x1b\xf7\x7e\x78\xe7\x6d\x18\xeb\x90\x0d\xb6\xfa\xe6\x01\x8c\xf0\xc0\xb5\x7e\x32\xb6\x3d\x6e\x19\x1a\x12\x7f\xb0\x05\xd0\xd7\x54\x33\x1c\xbc\x23\xee\xec\xdc\x81\xc5\x83\x87\x2f\x9e\xfc\x67\xf1\xab\x3f\xbd\xfc\xe0\xf1\x8b\xbf\x7c\xf4\xf2\xcf\xbf\x59\xfe\xeb\xc3\xc5\x17\xbf\x7d\xfe\xec\x93\xff\xfd\xf7\x63\x23\x71\xe3\xe6\x2d\xd8\xc8\xef\x3b\x29\x90\x81\x0c\x51\x13\xf0\xc6\x44\x2a\xd4\xae\x15\xeb\x91\xfd\x96\x05\xce\x8a\xc5\x49\x88\xae\x35\xa5\x38\x8b\x84\xd4\x16\x78\x82\x6b\xe4\xda\xb5\x66\xd4\xd7\x63\xd7\xc7\x29\xf5\xd0\x4e\x3e\x36\xe8\xf9\xa8\x3c\x49\x23\x4d\x05\x2f\xa9\xde\x45\x1d\x47\x30\x17\xb1\x84\x29\xf5\x51\x80\xe0\x60\x1c\xe6\xa8\x67\x42\x4e\x60\x24\x24\x8c\x24\x62\x67\x03\xe2\x04\xe7\x33\x21\x7d\x55\x82\x8b\x76\xa2\x36\x04\x4c\x0c\xb1\x9d\x43\xb4\x41\x22\x61\x9a\x86\xd8\x06\x46\xa7\xd8\x86\x19\x0e\xa5\xf6\xda\xb9\x16\xf8\x68\xe8\x72\xbe\xd2\x28\x38\x54\x69\x49\x87\xb1\x71\x3a\xe7\xe6\x8e\x30\xca\x27\x30\x96\x38\x72\xad\xb1\xd6\x91\xea\x39\xce\x48\x70\xad\x3a\x81\x10\x01\x43\x12\x51\xd5\xf1\x44\xe8\x78\x4a\x5d\x1f\x91\x90\xb2\xb9\x7b\x3b\x42\x7e\xe5\x2e\xe1\xca\x02\x89\xcc\xb5\x94\x9e\x33\x54\x63\x44\x5d\x01\x4d\x79\x63\x21\xb5\x17\x6b\xa0\x9e\x09\x58\x6a\x28\x8a\x87\x8c\x7a\xce\x88\x4c\x0d\xb5\x13\xf1\xc0\x5a\x57\x2b\x41\x56\x74\x3c\xa5\x9c\x24\x30\x1d\xe3\xd0\xd4\x3d\x3c\x84\xce\x14\xa5\x32\x2b\x3b\x3a\xca\xed\x27\xea\xe6\x0d\xa0\xe3\x13\x4d\xec\x11\x13\x33\x38\x4c\x08\x00\x9e\x60\x42\xf6\xe0\xd2\x68\x34\xda\xcb\x48\x43\x21\x7d\x94\x3d\xd8\x8e\xee\x83\x12\x8c\xfa\x30\x56\x8c\x34\xbb\x6d\xe8\xbe\xd9\x86\xed\xae\xf9\xed\x5c\x6b\xe5\xe2\x21\x91\x01\xe5\xf6\x50\x68\x2d\xc2\x1e\xbc\x15\xdd\xcf\x39\x1a\xef\x6b\x9b\x30\x1a\xf0\x1e\x78\xc8\x35\xca\x9c\x93\x14\x54\x0f\xae\xee\x76\x57\xd2\x63\xa4\xc1\x58\xf7\x76\xae\x96\x68\x11\xf1\x7d\xca\x03\x5b\x8b\xa8\x07\xdb\x05\xe3\x68\x7d\x35\xd1\x61\xc5\x99\xde\xba\xa4\x16\x91\xad\xd0\x4b\x72\xde\x61\x22\x10\x87\x15\x47\xb6\xbf\x53\xb2\x39\x24\xde\x24\x90\x22\xe6\x7e\x0f\x62\xc9\x9a\x59\xb0\x8d\x96\xc9\x4e\x0b\xb8\xb0\x25\x46\x48\xf4\xca\x44\xdf\xc9\xa2\xdc\x77\xd2\xdd\xdc\x1f\x0a\x7f\x0e\x09\xd1\xb5\xca\x88\x43\x46\xbc\xc9\x5e\x9a\x62\x9f\x4e\xc1\x63\x44\x29\xd7\x32\xd5\x49\x28\x47\x09\x2a\x92\x48\x7c\x2b\xd7\xf5\xa9\x8a\x18\x99\xf7\x80\x0b\x8e\xa9\xde\x9a\x26\xe1\x53\xa2\xec\x53\x00\x83\xbe\xe3\xd3\xe9\x69\xf9\x52\x28\x32\x34\x80\x3e\xc9\xb9\x66\x95\x79\x95\x5d\x2a\xf8\x55\x04\x23\x63\x9b\xad\x0f\x63\xea\x63\x49\x08\xe0\x7b\x74\x8a\xc9\x5e\xbf\x95\x6e\xac\x95\xfe\xca\x19\xf3\x41\x32\xbf\x36\xbb\x68\xd6\x22\x05\x53\x36\x91\x48\x56\x4e\x96\x24\x8a\xcc\x57\x96\xb9\x41\xc6\x9c\x02\xa7\x62\x39\x64\xc2\x9b\xec\xa5\xa9\x4f\x4b\xb0\x66\xa5\x05\x84\xed\x89\x98\x6b\x6b\x60\x57\xac\xd5\x09\x9b\xba\xaf\x84\x65\xf1\xf7\x3f\x2e\x8f\x9f\x2e\x1e\x7d\x7e\xf2\xe5\xd7\x75\x21\xa9\x59\x45\x1e\x8b\x1a\x0f\x8b\x50\x29\x26\x66\x28\x2d\x48\x8e\x7e\xd7\xfa\x01\xfa\xb1\x87\x20\x85\x26\x49\xd1\xab\x08\xd1\xaf\xf8\xd4\xa7\x39\x06\xcd\x95\x07\x7d\x87\x0e\x36\xfb\x57\x63\x35\xc1\x47\x20\x9e\x4e\xe2\x9c\x19\x7f\x9b\x93\x21\x43\xc7\xa7\xca\x3c\x0b\x27\x6a\xcd\xa7\x28\x17\x30\x3f\x22\x4a\x97\x16\xfd\x2e\xf7\x24\x12\xf5\xda\xcb\xce\xd4\x2f\xb0\x6c\x54\xe6\x30\x2e\x62\x6d\xbe\x6a\x17\x97\x72\xcf\x6d\x83\xf2\x91\xa8\x05\x4d\x99\xf5\x98\xb5\xe5\x94\xb5\x87\x12\xf0\xb4\xdb\xb9\xd6\xd9\xbe\x76\x5a\xb1\x66\x73\x26\x65\xee\x99\x1d\x54\xbf\x33\x13\xb6\x6d\xfa\x73\xc9\x90\x6d\xf7\x92\x3f\x78\xef\xde\x8d\x57\x58\x5b\xbd\x94\x50\x95\xc9\xa7\xd2\xd4\xcb\xf7\x41\x9f\xd1\x41\x5f\x45\x84\x9f\x96\xb0\x0d\xd9\x1a\x2c\x1f\x7d\xb0\xfc\xdd\x3f\x4e\x7e\xf9\x8b\xe5\xa3\xbf\xf6\xcc\x01\x1d\x11\x9e\xa9\x50\xdf\xb5\x86\xa8\x89\x35\x98\x56\x5b\x66\x2e\xe5\x30\x3a\x80\x6f\xbd\xa6\xa1\x93\x7f\x7e\x75\xf2\xd5\xe3\xe5\xf1\xd3\x97\xc7\x4f\x36\x18\x32\xf2\xfb\x32\xe6\x69\x34\xec\xb2\x89\x73\x19\x78\xf1\xe4\xf1\x8b\x67\xcf\xea\x0c\xa8\xb9\x62\xc2\x9c\xfa\x17\x31\x70\xe3\xce\x7b\x39\x7a\x0d\xbc\x17\xc5\x17\x87\x5f\x7c\xf4\x60\xf1\xb7\xdf\x3f\x7f\xf6\xf5\xc9\xa7\x9f\xd7\x5a\x08\x31\xbc\xb8\x85\x77\xc4\xad\x38\x84\x1e\xd4\x81\x07\x42\x8a\x58\x53\x8e\xfb\x3c\x0e\xbf\x49\x12\x16\x9f\x3c\x5c\x7c\xf9\x69\x6d\x96\x51\x45\x82\xab\x52\x9a\x21\x54\x6b\x46\xc8\xda\x7c\x19\x50\x3d\x8e\x87\xc9\x54\x19\x52\x5f\x4c\x94\x13\x08\x3b\xda\x31\x3d\x5a\x4e\x93\xb3\x8d\xc8\xc0\xcc\xee\xfb\x43\x46\xf8\xa4\xe8\x65\xe9\xdc\x26\xd1\xb7\x12\xfb\x12\x7d\x2a\xd1\x33\x2d\x6a\x00\xcb\x5f\x7f\xb6\x78\xf0\xd9\xf2\xe3\x9f\x2f\x1e\x1e\x43\xdf\x36\xed\x36\xf7\x62\xe3\xee\xa2\x9c\x6a\x4a\x98\x6d\x12\x50\x0c\x10\xe5\xe6\xde\xa7\x61\x50\x08\x87\x24\x40\x7b\x26\x49\x14\x19\xf7\x9c\xd3\x27\x44\x55\xa2\x6e\x0e\x51\x11\xe5\xdc\xf0\x37\x1c\x22\x66\x25\xdb\xaf\x68\xed\x86\xbf\x73\x06\xff\xea\x19\xfc\x6b\x67\xf0\x77\xab\x9e\x9f\x3e\x9e\xd2\xab\x4f\xca\x9e\x12\x09\xa6\x04\x66\x0a\x5c\xf8\xd1\x8f\xf7\x0a\xa2\x27\xb8\x17\x4b\x69\x2e\x1e\x2e\x74\x57\x74\x49\xb8\x3f\xc1\xf9\x8a\x30\x31\xf3\xbe\x46\xd3\x90\xf6\x95\x26\xd2\xc8\xf3\x98\xb1\xcd\x12\xc8\xfd\x57\xf1\x37\xf3\x6e\x73\x36\x07\x17\xb4\x8c\x71\xc5\x09\x63\x06\x2e\x6c\x97\x5c\x9b\xa9\xef\xfa\xbe\x81\xb0\xac\x94\x48\x47\xd0\x64\xc2\x4b\x3a\x6a\x27\x92\x42\x0b\x4f\x30\x70\x5d\xc8\x8a\xd8\x6a\xe5\xd3\x74\x49\x77\xa6\x4c\x75\x5b\x57\x0a\xc5\xb1\x50\xfa\x8a\xe5\xcc\xd4\x75\xea\xbb\xd1\x4e\x94\x7a\x9a\x99\x38\x02\x64\x0a\x8b\x4b\x49\x19\xe6\x3c\x28\xc9\xaf\x27\xb8\x12\x0c\xcd\x98\xdf\x4c\x81\x92\xab\x4a\xdf\xc9\x12\x76\xf9\xfd\x58\x24\xa3\x7b\x96\x41\x50\xd2\x2b\xae\x54\x07\xf9\x8d\xea\x60\xc3\x85\x6a\xf0\xda\x18\x07\xef\xc7\x28\xe7\xe7\x04\x49\x4b\x69\x14\xf3\xf4\x9e\x12\x47\x3e\xd1\x78\x93\x68\xd2\x6c\x15\x91\xa1\xa3\xe6\x5a\x1d\xd8\xa7\x2a\x67\x70\xb5\xdb\xed\x76\xe1\xf2\x65\xd0\xf3\x08\x45\x45\xa3\xe5\xba\x56\x6e\xa1\x94\xb7\x72\xf1\x34\x8b\x9b\xdd\xd1\x56\xf6\x92\x97\xf7\x7a\x65\x9c\xab\x36\xa0\x0a\x91\x1f\x80\xa7\x93\x1b\xa0\xbe\x6b\x24\x0b\x23\x6b\xd5\xb1\x01\xe8\x35\x71\xb2\xe7\x1b\x1d\x72\x40\xee\x37\x57\x78\xb1\x64\xbd\x15\x68\xbb\xa0\x9b\x61\xe6\xde\x3c\xc2\x1e\x34\x0e\x94\xe0\x8d\x15\xc7\x74\x73\x11\xeb\x1e\x98\x58\xaf\xc8\x2a\xf6\x3c\x54\xaa\xb7\xca\x62\xd3\x60\xb4\x4a\xbe\x03\xbc\xd1\x6c\x5c\x2a\x37\xed\x46\xab\x33\xd6\x21\x6b\x7e\x9f\xe8\x71\x27\xb9\x26\x26\x4a\x1d\xc3\xdb\x27\xd3\x60\x3f\x42\xd9\x82\x2b\xd0\x80\x37\x1b\x45\x6e\x2a\x40\x59\x7b\xae\x03\xf2\xa2\xf8\x6c\x8c\xac\x01\xd7\x61\x84\x18\x9e\x8d\x51\xe9\xb3\x39\x52\xa2\x5e\xe1\x6c\x56\xce\x66\xa4\x8a\x5a\xda\x04\x73\x56\x6b\x6f\xab\xa4\xb8\x3a\x5a\xdd\x44\x36\x42\x94\x6a\x0d\xb9\x53\x5c\xca\xa0\xb3\x76\x99\xab\xd8\x49\x74\x4b\x6e\x1d\xad\x52\xea\x89\x30\x62\xa8\xb1\x9c\xd3\x6a\x3e\x15\xea\x7b\x69\x39\x34\xeb\x44\xa0\xb2\x9b\x4b\x8c\xa3\x36\x6c\xef\x76\xbb\x65\xd3\x79\xb1\x66\xb4\xa3\xf4\x51\xd6\xcf\xc2\xe0\x38\xcb\x3f\xfc\x74\x79\xfc\xf4\xf9\xbf\x1f\xbe\x3c\xfe\xe2\xe4\x67\x1f\x66\x54\xe3\xd0\xbb\x5c\xa3\x9c\x12\x56\x78\xd4\xcc\x36\xa2\xe3\x14\x51\xcf\x67\x86\x46\xab\xe3\x29\xd5\x6c\x24\x23\x45\xa3\x5d\xcf\x6a\xb9\x6e\x43\x06\xc3\xe6\xce\xee\x6e\x1b\xf2\x9f\x56\x03\xae\x83\x95\x0c\x22\x3d\xb0\x66\x63\xaa\xd1\x6a\xe5\xa6\x8e\xda\x57\xbb\xdd\x56\xf9\xf4\xdd\xea\x3b\x43\xe1\xcf\x07\x5b\x5b\x7d\x27\xf9\x9f\xe8\xff\x03\x00\x00\xff\xff\x24\x66\x54\xaa\x24\x15\x00\x00"

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl": indexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
