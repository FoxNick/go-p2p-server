// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/index.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x57\x7b\x8b\x1b\xc9\x11\xff\x3b\xfb\x29\x2a\xe3\x3b\x4b\xc2\x9a\x19\xed\xae\x4d\x8c\x56\x23\x27\xd8\x47\x38\x48\xce\x26\xf6\xfd\x11\x42\x58\x5a\x3d\x25\xa9\x57\xad\xee\xbe\xee\x1e\xc9\x8a\x59\xb8\x4b\xb8\xbc\x38\x07\x92\x0b\x59\x08\x26\x0e\x81\x23\xe1\x08\x21\x10\xc7\x24\x77\x31\xf9\x32\xb7\x5a\xfb\xaf\x7c\x85\xd0\xf3\xd2\x48\xab\x59\x3f\x40\x68\x66\xea\xf1\xab\xea\xea\xaa\xae\xea\x9d\xde\xd7\x6f\xdd\xbe\x79\xef\xfb\x77\xde\x81\xb1\x9d\xf2\xfe\x4e\xcf\x3d\x80\x13\x31\x8a\xbc\x1f\x8d\x7d\x2a\x3c\x47\x43\x12\xf7\x77\x00\x7a\x96\x59\x8e\xfd\x6f\xcb\x3b\x7b\x77\xe0\xf4\xe3\x87\xcf\x9f\xfc\xfb\xf4\x97\x7f\x7c\xf1\xe1\xe3\xe7\x7f\xfe\xe9\x8b\x3f\xfd\x7a\xf9\xcf\x8f\x4e\x3f\xff\xcd\x57\xcf\x3e\xfd\xdf\x7f\x3e\x71\x12\x37\x6f\xbd\x07\x5b\xf9\xbd\x30\x03\x72\x90\x53\xb4\x04\xe8\x98\x68\x83\x36\xf2\x12\x3b\xf4\xaf\x7b\x10\xae\x58\x82\x4c\x31\xf2\x66\x0c\xe7\x4a\x6a\xeb\x01\x95\xc2\xa2\xb0\x91\x37\x67\xb1\x1d\x47\x31\xce\x18\x45\x3f\xfd\xd8\xa2\x17\xa3\xa1\x9a\x29\xcb\xa4\xa8\xa8\xde\x45\x9b\x28\x58\xc8\x44\xc3\x8c\xc5\x28\x41\x0a\x70\x0e\x0b\xb4\x73\xa9\x27\x30\x94\x1a\x86\x1a\x31\xd8\x82\x38\xc1\xc5\x5c\xea\xd8\x54\xe0\xd4\x9e\x6a\xc3\x88\xcb\x01\xb6\x0b\x88\x36\x68\x24\xdc\xb2\x29\xb6\x81\xb3\x19\xb6\x61\x8e\x03\x6d\x69\xbb\xd0\x82\x18\x1d\x5d\x2f\x56\x1a\x25\x87\x19\xab\xd9\x20\x71\x4e\x17\xdc\xc2\x11\xce\xc4\x04\xc6\x1a\x87\x91\x37\xb6\x56\x99\x6e\x18\x0e\xa5\xb0\x26\x18\x49\x39\xe2\x48\x14\x33\x01\x95\xd3\x90\x1a\x73\x63\x48\xa6\x8c\x2f\xa2\xdb\x0a\xc5\x95\xbb\x44\x18\x0f\x34\xf2\xc8\x33\x76\xc1\xd1\x8c\x11\xed\x1a\x68\xc6\x1b\x4b\x6d\x69\x62\x81\x51\x17\xb0\xcc\x90\x4a\x06\x9c\xd1\x70\x48\x66\x8e\x1a\x28\x31\xf2\x36\xd5\x2a\x90\x6b\x3a\xd4\x98\x30\x0d\x4c\x40\x8d\x29\xcc\xa5\xd2\xee\x0d\x20\x88\x89\x25\xfe\x90\xcb\x39\x3c\x48\x09\x00\x54\x72\xa9\xbb\x70\x69\x38\x1c\x1e\xe4\xa4\x81\xd4\x31\xea\x2e\xec\xaa\xfb\x60\x24\x67\x31\x8c\x0d\x27\xcd\x4e\x1b\x3a\x6f\xb7\x61\xb7\xe3\xfe\x83\xab\xad\x42\x7c\x4a\xf4\x88\x09\x7f\x20\xad\x95\xd3\x2e\x5c\x57\xf7\x0b\x8e\xc5\xfb\xd6\x27\x9c\x8d\x44\x17\x28\x0a\x8b\xba\xe0\xa4\xf9\xd3\x85\xfd\x6b\x9d\x95\xf4\x18\xd9\x68\x6c\xbb\x7b\xfb\x15\x9a\x22\x71\xcc\xc4\xc8\xb7\x52\x75\x61\xb7\x64\x1c\x6f\xae\x46\x3d\x58\x73\xa6\xbb\x29\x69\xa5\xf2\x0d\xd2\x74\x8b\x03\x2e\x47\xf2\xc1\x9a\x23\xbb\xdf\xa8\xd8\x1c\x10\x3a\x19\x69\x99\x88\xb8\x0b\x89\xe6\xcd\x3c\xb6\x4e\xcb\x6d\x46\x0b\x84\xf4\x35\x2a\x24\x76\x65\xa2\x17\xe6\x51\xee\x85\x59\xf1\xf6\x06\x32\x5e\x40\x4a\x8c\xbc\x2a\xe2\x80\x13\x3a\x39\xc8\x76\x34\x66\x33\xa0\x9c\x18\x13\x79\x2e\x19\x09\x13\xa8\xc1\x28\x8d\x24\xf6\x0a\xdd\x98\x19\xc5\xc9\xa2\x0b\x42\x0a\xcc\xf4\x36\x34\x89\x98\x11\xe3\x9f\x03\xe8\xf7\xc2\x98\xcd\xce\xcb\x57\x42\x91\xa3\x01\xf4\x48\xc1\x75\xab\x2c\x92\xea\x52\xc9\x5f\x47\x70\x32\xbe\xab\x74\x18\xb3\x18\x2b\x42\x00\xdf\x61\x33\x4c\x4b\xfb\xbd\xac\x8e\x56\xfa\x2b\x67\xdc\x07\xc9\xfd\xda\xee\xa2\x5b\x8b\x96\xdc\xf8\x44\x23\x59\x39\x59\x91\x28\x77\x7e\x6d\x99\x5b\x64\x5c\xd1\x9f\x8b\xe5\x80\x4b\x3a\x39\xc8\xb6\x3e\x4b\xc1\x9a\x95\x96\x10\x3e\x95\x89\xb0\x5e\xdf\x5f\xb3\x56\x27\xec\xf2\x7e\x2d\x2c\xa7\x7f\xfb\xc3\xf2\xe4\xe9\xe9\xa3\xbf\x9c\x7d\xf1\xdf\xba\x90\xd4\xac\xa2\x88\x45\x8d\x87\x65\xa8\x0c\x97\x73\xd4\x1e\xa4\x27\x7d\xe4\x7d\x0f\xe3\x84\x22\x68\x69\x49\x9a\xf4\x46\x21\xc6\x6b\x3e\xf5\x58\x81\xc1\x0a\xe5\x7e\x2f\x64\xfd\xed\xfe\xd5\x58\x4d\xf1\x11\x08\xb5\x69\x9c\x73\xe3\xef\x08\x32\xe0\x18\xc6\xcc\xb8\x67\xe9\x44\xad\xf9\x0c\xe5\x0d\xcc\x0f\x89\xb1\x95\x45\xbf\x2b\xa8\x46\x62\x5e\x79\xd9\xb9\xfa\x1b\x2c\x1b\x8d\x3b\x7b\xcb\x58\xbb\xaf\xda\xc5\x65\xdc\xd7\xb6\xc1\xc4\x50\xd6\x82\x66\xcc\x7a\xcc\xda\x74\x9a\xa1\x36\xeb\x5b\x31\xeb\x04\x57\x83\xdd\xab\xe7\x15\x6b\x8a\x33\x4d\x73\xea\x2a\xa8\xbe\x32\x53\xb6\xef\xda\x71\xc5\x90\xef\x77\xd3\x1f\xbc\x7f\xef\xe6\x05\xd6\x56\x2f\x15\x54\xe3\xf6\xd3\x58\x46\x8b\x3a\xe8\x71\xd6\xef\x19\x45\xc4\x79\x09\xdf\x91\xbd\xfe\xf2\xd1\x87\xcb\xdf\xfd\xfd\xec\x17\x3f\x5f\x3e\xfa\x6b\xd7\x1d\xd0\x8a\x88\x5c\x85\xc5\x91\x37\x40\x4b\xbc\xfe\x0c\x76\x83\x4e\xd0\x29\xb8\x21\x67\x7d\xf8\xda\x2b\x1a\x38\xfb\xc7\x97\x67\x5f\x3e\x5e\x9e\x3c\x7d\x71\xf2\x64\x8b\x01\x27\x7f\xa8\x13\x91\x45\xc1\xaf\x9a\x78\x2d\x03\xcf\x9f\x3c\x7e\xfe\xec\x59\x9d\x01\xb3\x30\x5c\xba\xd3\xfe\x4d\x0c\xdc\xbc\xf3\x7e\x81\x5e\x03\x4f\x55\xf2\xe6\xf0\x99\xff\xa7\x9f\x3e\x3c\xfd\xe2\xb7\xb5\x01\x42\xa3\xa4\x30\x95\x08\xc1\xd4\x6c\x18\x21\x1b\x13\xd8\x88\xd9\x71\x32\x48\xe7\xae\x29\x8b\xe5\xc4\x84\x23\xe9\xab\x3d\xd7\xd6\xf4\x2c\x3d\x0e\x88\x1e\xb9\xe9\xf6\x70\xc0\x89\x98\x94\xc7\x7f\x36\xea\x68\x8c\xbd\xd4\xbe\xc6\x98\x69\xa4\xee\x54\xef\xe7\xd3\xf5\xf2\x57\x9f\x9d\x7e\xfc\xd9\xf2\x93\x9f\x9d\x3e\x3c\x81\x9e\xef\xfa\x54\xe1\xcb\xd6\xb4\x64\x82\x59\x46\xb8\xef\x62\x54\x76\xde\x6a\x57\xec\xb1\xe9\xa8\x14\x9e\x92\x11\xfa\x73\x4d\x94\x72\x4e\x86\xe7\x4b\x6b\x5d\xa2\xae\x81\x1b\xc5\x84\x70\xfc\x2d\xd5\xe7\xd6\xb3\x7b\x41\x4f\x74\xfc\xbd\x97\xf0\xf7\x5f\xc2\xbf\xfa\x12\xfe\xb5\x75\xcf\xcf\xd7\x75\x76\x45\xc8\xd8\x33\xa2\xc1\x25\xc2\xdc\x40\x04\x3f\xf8\xe1\x41\x49\xa4\x52\xd0\x44\x6b\x37\xa0\x47\xd0\x59\xd1\x35\x11\xf1\x04\x17\x2b\xc2\xc4\xcd\xc5\x16\xdd\x49\x7e\x68\x2c\xd1\x4e\x5e\x24\x9c\x6f\x97\x40\x11\x5f\xc4\xdf\xce\xbb\x2d\xf8\x02\x22\xb0\x3a\xc1\x15\x67\x9a\x70\x88\x60\xb7\xe2\xda\xdc\x7c\x2b\x8e\x1d\x84\xe7\x65\x44\x36\x84\x26\x97\x34\x6d\x45\x81\xd2\xd2\x4a\x2a\x39\x44\x11\xe4\xa9\xec\xb5\x8a\x31\xb4\xa2\x3b\x37\x2e\xc7\xbd\x2b\xa5\xe2\x58\x1a\x7b\xc5\x0b\xad\x26\x14\x6f\xb0\x38\x52\x7b\x2a\x73\x36\xb7\x72\x0c\xc8\x0d\x96\x03\x7d\x15\xe9\x35\x81\xd2\x7f\x2a\x85\x91\x1c\xdd\x94\xdc\xcc\xb0\xd2\x49\xbf\x17\xe6\xdb\x76\xf9\x83\x44\xa6\x93\x6f\xbe\x8f\x60\x34\x2d\x2f\x20\x47\xc5\xfd\xe3\xc8\xdc\x98\x45\xd7\x5d\x26\x5c\xa8\x56\x94\x34\x8d\x45\x70\x64\xd2\x3b\x9a\x0e\x04\xda\x50\xa8\x69\x78\xf4\x41\x82\x7a\xf1\x4d\x4e\x9c\x97\x17\x40\x65\x99\x34\x4c\x44\x36\xdf\x27\x2a\x26\x16\x6f\x11\x4b\x9a\xad\x32\x2a\x6c\xd8\xdc\x48\x03\xff\x5c\xe2\xf4\xf7\x3b\x9d\x4e\x07\x2e\x5f\x06\xbb\x50\x28\xd7\x34\x5a\x51\xe4\x15\x16\x2a\xdb\x56\xcd\x9d\x66\x79\x23\x3a\xde\xc9\x5f\x8a\xec\xde\x4c\x8c\xd7\x4a\x0d\x58\x87\x28\x42\x76\x7e\x63\x47\x68\xef\x3a\xc9\xd2\xc8\x46\x66\x6c\x01\x7a\x45\x9c\xfc\xf9\x56\x40\x8e\xc8\xfd\xe6\x0a\x2f\xd1\xbc\xbb\x02\x6d\x97\x74\x37\x04\xdc\x5b\x28\xec\x42\xe3\xc8\x48\xd1\x58\x71\x5c\x37\x94\x89\xed\x82\x8b\xf5\x8a\x6c\x12\x4a\xd1\x98\xee\x6a\x17\x9b\x0e\xa3\x55\xf1\x1d\xe0\xad\x66\xe3\x52\xb5\xe9\x35\x5a\xc1\xd8\x4e\x79\xf3\xbb\xc4\x8e\x83\xf4\x7a\x95\x2a\x05\x54\x25\x2d\xb8\x02\x0d\x78\xbb\x51\x6e\xc9\x9a\x7e\xde\xd5\xea\xf4\x1d\xef\x90\xcc\x46\x87\x0a\xf5\xc5\x40\x79\x7b\x2f\x80\x52\xed\xac\x09\x15\xac\x35\xbd\xca\xeb\xea\x78\x8b\x52\x2d\x85\xa8\xcd\x86\x8d\xa0\xbc\x51\x40\xb0\x71\x13\x59\xb3\x98\xea\x56\x0c\x1d\xaf\xe2\x4a\xe5\x54\x71\xb4\x58\x0d\xec\x7a\x50\x0d\xda\x7b\xd9\x9e\x34\xeb\x44\x60\xad\xa4\x2a\x8c\xe3\x36\xec\x75\x3a\x9d\xaa\xe9\x22\x63\x72\xda\x71\xf6\xa8\xea\x1f\x64\xc5\x11\x86\xcb\xdf\xff\x78\x79\xf2\xf4\xab\x7f\x3d\x7c\x71\xf2\xf9\xd9\x4f\x3e\xca\xa9\xce\xa1\x77\x85\x45\x3d\x23\xbc\xf4\xa8\x99\x57\x43\x18\x96\xf1\x2f\xba\x77\xa3\x15\x50\x63\x9a\x8d\xb4\xb9\x37\xda\xf5\xac\x56\x14\x35\xf4\x68\xd0\xdc\xbb\x76\xad\x0d\xc5\x5f\xab\x01\x37\xc0\x4b\x47\x82\x2e\x78\xf3\x31\xb3\xe8\xb5\x0a\x53\xc7\xed\xfd\x4e\xa7\x55\x3d\xfb\x76\x7a\xa1\xbb\xd7\xf7\x77\xdc\x3d\xdf\x4e\x79\xff\xff\x01\x00\x00\xff\xff\x5f\xd2\xb8\x90\xd0\x13\x00\x00"

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl": indexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
