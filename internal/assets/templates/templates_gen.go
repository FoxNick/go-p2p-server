// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/index.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\x7b\x8b\x1b\xc9\x11\xff\x3b\xfb\x29\x2a\xe3\x3b\x4b\xc2\x9a\x19\xed\xda\x26\x87\xac\x91\x13\xec\xe3\x38\x48\x6c\x13\xfb\xfe\x08\x21\x2c\xad\x9e\x92\xd4\xbb\x3d\xdd\x73\xdd\x3d\x92\x15\xb3\x70\x97\xe0\xcb\x83\x73\x20\xb9\x23\x1b\x82\x89\x43\xe0\xc8\x71\x24\x21\x10\xc7\x24\x77\x31\xf7\x65\x2c\xad\xfd\x57\xbe\x42\xe8\x79\x69\x46\xab\xf1\x2b\xb0\x68\x66\xea\xf1\xab\xea\xaa\xea\xae\xea\xdd\x19\x7c\xf3\xea\xf5\x2b\xb7\x7e\x70\xe3\x6d\x98\x9a\x88\x0f\x77\x06\xf6\x01\x9c\x88\x49\xe0\xfc\x78\xea\x52\xe1\x58\x1a\x92\x70\xb8\x03\x30\x30\xcc\x70\x1c\xbe\x23\x6f\xec\xdd\x80\xe5\xdd\x7b\x4f\x1f\xfe\x7b\xf9\xcb\x3f\x3e\xfb\xe0\xc1\xd3\x3f\x7f\xf4\xec\x4f\xbf\x5e\xfd\xf3\xc3\xe5\x17\xbf\x79\xf2\xf8\x93\xff\xfe\xe7\x63\x2b\x71\xe5\xea\x35\xd8\xca\x1f\xf8\x19\x90\x85\x8c\xd0\x10\xa0\x53\xa2\x34\x9a\xc0\x49\xcc\xd8\x7d\xcb\x01\x7f\xcd\x12\x24\xc2\xc0\x99\x31\x9c\xc7\x52\x19\x07\xa8\x14\x06\x85\x09\x9c\x39\x0b\xcd\x34\x08\x71\xc6\x28\xba\xe9\xc7\x16\xbd\x10\x35\x55\x2c\x36\x4c\x8a\x8a\xea\x4d\x34\x49\x0c\x0b\x99\x28\x98\xb1\x10\x25\x48\x01\xd6\x61\x81\x66\x2e\xd5\x21\x8c\xa5\x82\xb1\x42\xf4\xb6\x20\x1e\xe2\x62\x2e\x55\xa8\x2b\x70\xf1\x5e\xdc\x85\x09\x97\x23\xec\x16\x10\x5d\x50\x48\xb8\x61\x11\x76\x81\xb3\x19\x76\x61\x8e\x23\x65\x68\xb7\xd0\x82\x10\x2d\x5d\x2d\xd6\x1a\x25\x87\x69\xa3\xd8\x28\xb1\x4e\x17\xdc\xc2\x11\xce\xc4\x21\x4c\x15\x8e\x03\x67\x6a\x4c\xac\xfb\xbe\x3f\x96\xc2\x68\x6f\x22\xe5\x84\x23\x89\x99\xf6\xa8\x8c\x7c\xaa\xf5\xe5\x31\x89\x18\x5f\x04\xd7\x63\x14\xe7\x6e\x12\xa1\x1d\x50\xc8\x03\x47\x9b\x05\x47\x3d\x45\x34\x35\xd0\x8c\x37\x95\xca\xd0\xc4\x00\xa3\x36\x60\x99\xa1\x38\x19\x71\x46\xfd\x31\x99\x59\xaa\x17\x8b\x89\xb3\xa9\x56\x81\xac\xe9\x50\xad\xfd\x34\x30\x1e\xd5\xba\x30\x97\x4a\xdb\x37\x00\x2f\x24\x86\xb8\x63\x2e\xe7\x70\x27\x25\x00\x50\xc9\xa5\xea\xc3\x99\xf1\x78\x7c\x29\x27\x8d\xa4\x0a\x51\xf5\x61\x37\xbe\x0d\x5a\x72\x16\xc2\x54\x73\xd2\xee\x75\xa1\xf7\x66\x17\x76\x7b\xf6\xd7\xbb\xd0\x29\xc4\x23\xa2\x26\x4c\xb8\x23\x69\x8c\x8c\xfa\xf0\x56\x7c\xbb\xe0\x18\xbc\x6d\x5c\xc2\xd9\x44\xf4\x81\xa2\x30\xa8\x0a\x4e\x5a\x3f\x7d\x38\x7f\xb1\xb7\x96\x9e\x22\x9b\x4c\x4d\x7f\xef\x7c\x85\x16\x93\x30\x64\x62\xe2\x1a\x19\xf7\x61\xb7\x64\x1c\x6d\xae\x26\xbe\x53\x73\xa6\xbf\x29\x69\x64\xec\x6a\xa4\x69\x8a\x3d\x2e\x27\xf2\x4e\xcd\x91\xdd\x6f\x55\x6c\x8e\x08\x3d\x9c\x28\x99\x88\xb0\x0f\x89\xe2\xed\x3c\xb6\x56\xcb\x26\xa3\x03\x42\xba\x0a\x63\x24\x66\x6d\x62\xe0\xe7\x51\x1e\xf8\xd9\xe6\x1d\x8c\x64\xb8\x80\x94\x18\x38\x55\xc4\x11\x27\xf4\xf0\x52\x96\xd1\x90\xcd\x80\x72\xa2\x75\xe0\xd8\x62\x24\x4c\xa0\x02\x1d\x2b\x24\xa1\x53\xe8\x86\x4c\xc7\x9c\x2c\xfa\x20\xa4\xc0\x4c\x6f\x43\x93\x88\x19\xd1\xee\x29\x80\xe1\xc0\x0f\xd9\xec\xb4\x7c\x25\x14\x39\x1a\xc0\x80\x14\x5c\xbb\xca\xa2\xa8\xce\x94\xfc\x3a\x82\x95\x71\xed\x4e\x87\x29\x0b\xb1\x22\x04\xf0\x5d\x36\xc3\x74\x6b\x5f\xcb\xf6\xd1\x5a\x7f\xed\x8c\xfd\x20\xb9\x5f\xdb\x5d\xb4\x6b\x51\x92\x6b\x97\x28\x24\x6b\x27\x2b\x12\x65\xe6\x6b\xcb\xdc\x22\x63\x37\xfd\xa9\x58\x8e\xb8\xa4\x87\x97\xb2\xd4\x67\x25\xd8\xb0\xd2\x12\xc2\xa5\x32\x11\xc6\x19\xba\x35\x6b\x4d\xc2\xb6\xee\x6b\x61\x59\xfe\xed\x0f\xab\xe3\x47\xcb\xfb\x9f\x9f\x7c\xf9\x75\x53\x48\x1a\x56\x51\xc4\xa2\xc1\xc3\x32\x54\x9a\xcb\x39\x2a\x07\xd2\x93\x3e\x70\xbe\x8f\x61\x42\x11\x94\x34\x24\x2d\x7a\x1d\x23\x86\x35\x9f\x06\xac\xc0\x60\x85\xf2\x70\xe0\xb3\xe1\x76\xff\x1a\xac\xa6\xf8\x08\x84\x9a\x34\xce\xb9\xf1\xb7\x05\x19\x71\xf4\x43\xa6\xed\xb3\x74\xa2\xd1\x7c\x86\xf2\x1a\xe6\xc7\x44\x9b\xca\xa2\xdf\x15\x54\x21\xd1\x2f\xbd\xec\x5c\xfd\x35\x96\x8d\xda\x9e\xbd\x65\xac\xed\x57\xe3\xe2\x32\xee\x2b\xdb\x60\x62\x2c\x1b\x41\x33\x66\x33\x66\x63\x39\xcd\x50\xe9\x7a\x2a\x66\x3d\xef\x82\xb7\x7b\xe1\xb4\x62\xc3\xe6\x4c\xcb\x9c\xda\x1d\xd4\xbc\x33\x53\xb6\x6b\xdb\x71\xc5\x90\xeb\xf6\xd3\x3f\x78\xef\xd6\x95\xe7\x58\x5b\xbf\x54\x50\xb5\xcd\xa7\x36\x8c\x16\xfb\x60\xc0\xd9\x70\xa0\x63\x22\x4e\x4b\xb8\x96\xec\x0c\x57\xf7\x3f\x58\xfd\xf6\xef\x27\xbf\xf8\xf9\xea\xfe\x5f\xfa\xf6\x80\x8e\x89\xc8\x55\x58\x18\x38\x23\x34\xc4\x19\xce\x60\xd7\xeb\x79\xbd\x82\xeb\x73\x36\x84\x6f\xbc\xa4\x81\x93\x7f\x7c\x75\xf2\xd5\x83\xd5\xf1\xa3\x67\xc7\x0f\xb7\x18\xb0\xf2\xfb\x2a\x11\x59\x14\xdc\xaa\x89\x57\x32\xf0\xf4\xe1\x83\xa7\x8f\x1f\x37\x19\xd0\x0b\xcd\xa5\x3d\xed\x5f\xc7\xc0\x95\x1b\xef\x15\xe8\x0d\xf0\x34\x4e\x5e\x1f\x7e\xf9\xd1\xdd\xe5\x5f\x7f\xf7\xe4\xf1\xd7\x27\x9f\x7e\xde\x68\x21\xc2\xe8\xf5\x2d\xbc\x23\xaf\x25\x11\xf4\xa1\x09\x7c\x22\x95\x4c\x0c\x13\xb8\x2f\x92\xe8\xff\x49\xc2\xf2\x93\x7b\xcb\x2f\x3f\x6d\xcc\x32\xea\x58\x0a\x5d\x49\x33\x44\x7a\xc3\x08\xd9\x18\x23\x27\xcc\x4c\x93\x51\x3a\x3c\x46\x2c\x94\x87\xda\x9f\x48\x37\xde\xb3\xbd\x59\xcd\xd2\x33\x8d\xa8\x89\x1d\xd1\xf7\x47\x9c\x88\xc3\xb2\x87\x65\xf3\x9a\xc2\xd0\x49\xed\x2b\x0c\x99\x42\x6a\x5b\xd3\x10\x56\xbf\xfa\x6c\x79\xf7\xb3\xd5\xc7\x3f\x5b\xde\x3b\x86\x81\x6b\xdb\x6c\xe1\xc5\xd6\x5d\xc5\x04\x33\x8c\x70\xd7\x26\xa0\x1c\x1c\xaa\x4d\x7d\xc0\xa2\x49\x29\x1c\x91\x09\xba\x73\x45\xe2\xd8\xba\xe7\x9f\x3e\x19\xea\x12\x4d\xf3\x87\x8e\x99\x10\x96\xbf\xe5\xf0\xb0\x2b\xd9\x7d\x4e\x4b\xb7\xfc\xbd\x17\xf0\xcf\xbf\x80\x7f\xe1\x05\xfc\x8b\x75\xcf\x4f\x1f\x4b\xd9\x0d\x27\x63\xcf\x88\x02\x5b\x02\x73\x0d\x01\xfc\xf0\x47\x97\x4a\x22\x95\x82\x26\x4a\xd9\xfb\x45\x00\xbd\x35\x5d\x11\x11\x1e\xe2\x62\x4d\x38\xb4\x63\xbd\x41\xdb\x88\xf6\xb5\x21\xca\xca\x8b\x84\xf3\xed\x12\x28\xc2\xe7\xf1\xb7\xf3\xae\x0b\xbe\x80\x00\x8c\x4a\x70\xcd\x89\x12\x0e\x01\xec\x56\x5c\x9b\xeb\xef\x84\xa1\x85\x70\x9c\x8c\xc8\xc6\xd0\xe6\x92\xa6\x9d\xd4\x8b\x95\x34\x92\x4a\x0e\x41\x00\x79\x11\x3b\x9d\x62\x8a\xae\xe8\xce\xb5\xad\x6e\xe7\x5c\xa9\x38\x95\xda\x9c\x73\xfc\xb9\xbe\xcc\xc2\x20\xde\x8b\x33\x4f\x73\x13\x47\x80\x5c\x63\x79\x19\xa9\xc2\xbc\x0a\x4a\xfa\x4b\xa5\xd0\x92\xa3\x1d\xef\xdb\x19\x50\x7a\x45\x19\xf8\x79\xc2\xce\xbe\x9f\xc8\x74\x64\xcf\x33\x08\x5a\xd1\xf2\xe6\x74\x50\x5c\x9c\x0e\xf4\xe5\x59\x90\x36\x05\x5b\x07\xcf\x55\x2d\xb6\x32\x0d\x85\x77\xa0\xd3\x0b\xa6\xf2\x04\x1a\x5f\xc4\x91\x7f\xf0\x7e\x82\x6a\xf1\x6d\x4e\xac\xa7\xcf\x81\xca\xea\x68\x9c\x88\xec\x72\x92\xc4\x21\x31\x78\x95\x18\xd2\xee\x94\x61\x61\xe3\xf6\x46\x11\xb8\xa7\xca\x66\x78\xbe\xd7\xeb\xf5\xe0\xec\x59\x30\x8b\x18\x65\x4d\xa3\x13\x04\x4e\x61\xa1\x92\xb4\x6a\xe5\xb4\xcb\xeb\xdc\xd1\x4e\xfe\x52\xd4\xf6\x66\x59\xbc\x52\x61\x40\x1d\xa2\x08\xd9\xe9\xcc\x4e\xd0\xdc\xb4\x92\xa5\x91\x8d\xd2\xd8\x02\xf4\x92\x38\xf9\xf3\x0d\x8f\x1c\x90\xdb\xed\x35\x5e\xa2\x78\x7f\x0d\xda\x2d\xe9\x76\x82\xb9\xb5\x88\xb1\x0f\xad\x03\x2d\x45\x6b\xcd\xb1\xad\x5c\x26\xa6\x0f\x36\xd6\x6b\xb2\x4e\x28\x45\xad\xfb\xeb\x2c\xb6\x2d\x46\xa7\xe2\x3b\xc0\x1b\xed\xd6\x99\x6a\xc7\x6e\x75\xbc\xa9\x89\x78\xfb\x7b\xc4\x4c\xbd\xf4\x6e\x98\x2a\x79\x96\xb7\x4f\x66\x93\xfd\x18\x55\x07\xce\x41\x0b\xde\x6c\x95\xb9\xa9\x01\xe5\xbd\xb9\x09\x88\xc6\xc9\x8b\x31\xf2\xee\xdb\x84\x11\x61\xf4\x62\x8c\x5a\x93\x2d\x90\x52\xf5\x1a\x67\xbb\x72\x3e\x20\xd5\xd4\xb2\x0e\x58\xb0\x3a\x97\x76\x2a\x8a\xeb\x73\x35\x48\x65\x63\x44\xa5\x37\x90\xbd\xf2\x26\x06\xde\xc6\x0d\xae\x66\x27\xd5\xad\xb8\x75\xb4\x4e\x29\x95\x51\xcc\xd1\x60\x35\xa7\xf5\x7c\x6a\x34\xb7\xb2\x72\x68\x37\x89\x40\x6d\x37\x57\x18\x47\x5d\xd8\xbd\xd8\xeb\x55\x4d\x17\xc5\x9a\xd3\x8e\xb2\x47\x55\x3f\x0f\x83\xef\xaf\x7e\xff\x93\xd5\xf1\xa3\x27\xff\xba\xf7\xec\xf8\x8b\x93\x9f\x7e\x98\x53\xad\x43\xef\x0a\x83\x6a\x46\x78\xe9\x51\x3b\xdf\x88\xbe\x5f\x46\xbd\x18\x18\x5a\x1d\x8f\x6a\xdd\x6e\xa5\xf3\x44\xab\xdb\xcc\xea\x04\x41\x4b\x4d\x46\xed\xbd\x8b\x17\xbb\x50\xfc\x74\x5a\x70\x19\x9c\x74\x0a\xe9\x83\x33\x9f\x32\x83\x4e\xa7\x30\x75\xd4\x3d\xdf\xeb\x75\xaa\x47\xef\xce\xc0\x1f\xc9\x70\x31\xdc\xd9\x19\xf8\xe9\xff\x3d\xff\x17\x00\x00\xff\xff\x6f\xd0\x80\xcb\x08\x15\x00\x00"

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl": indexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
