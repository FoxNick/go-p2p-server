// Code generated for package templates by go-bindata DO NOT EDIT. (@generated)
// sources:
// ../../../templates/index.tmpl
package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xff\x8b\x1b\xc7\x15\xff\xb9\xf7\x57\xbc\x6e\x12\x4b\xc2\xda\x5d\xdd\xd9\xa6\x46\xd6\xca\x2d\x76\x08\x81\xd6\x36\xb5\xf3\x43\x29\xe5\x18\xcd\x3e\x49\x73\x37\x3b\xb3\x99\x99\x95\xac\x9a\x83\xa4\xc5\xe9\x17\xe2\x42\x9b\xd0\x2b\xc5\xd4\xa5\x10\x1a\x42\x5b\x0a\x75\x4d\x9b\xd4\xe4\x9f\xb1\xee\xec\x9f\xfa\x2f\x94\xd9\x6f\xda\xd5\x69\xcf\xf6\x15\x0e\xed\xee\xfb\xf2\x79\x6f\xde\x7b\x33\xef\xcd\x6d\x0d\xbe\x79\xfd\xe6\xb5\x3b\x3f\xb8\xf5\x36\x4c\x4d\xc4\x87\x5b\x03\xfb\x00\x4e\xc4\x24\x70\x7e\x3c\x75\xa9\x70\x2c\x0d\x49\x38\xdc\x02\x18\x18\x66\x38\x0e\xdf\x91\xb7\x76\x6e\xc1\xf2\xfe\x83\xe7\x8f\xff\xbd\xfc\xe5\x1f\x5f\x7c\xf0\xe8\xf9\x9f\x3f\x7a\xf1\xa7\x5f\x1f\xfd\xf3\xc3\xe5\x17\xbf\x79\xf6\xf4\x93\xff\xfe\xe7\x63\x2b\x71\xed\xfa\x0d\xd8\xc8\x1f\xf8\x19\x90\x85\x8c\xd0\x10\xa0\x53\xa2\x34\x9a\xc0\x49\xcc\xd8\xbd\xec\x80\xbf\x62\x09\x12\x61\xe0\xcc\x18\xce\x63\xa9\x8c\x03\x54\x0a\x83\xc2\x04\xce\x9c\x85\x66\x1a\x84\x38\x63\x14\xdd\xf4\x63\x83\x5e\x88\x9a\x2a\x16\x1b\x26\x45\x45\xf5\x36\x9a\x24\x86\x85\x4c\x14\xcc\x58\x88\x12\xa4\x00\xeb\xb0\x40\x33\x97\x6a\x1f\xc6\x52\xc1\x58\x21\x7a\x1b\x10\xf7\x71\x31\x97\x2a\xd4\x15\xb8\x78\x27\xee\xc2\x84\xcb\x11\x76\x0b\x88\x2e\x28\x24\xdc\xb0\x08\xbb\xc0\xd9\x0c\xbb\x30\xc7\x91\x32\xb4\x5b\x68\x41\x88\x96\xae\x16\x2b\x8d\x92\xc3\xb4\x51\x6c\x94\x58\xa7\x0b\x6e\xe1\x08\x67\x62\x1f\xa6\x0a\xc7\x81\x33\x35\x26\xd6\x7d\xdf\x1f\x4b\x61\xb4\x37\x91\x72\xc2\x91\xc4\x4c\x7b\x54\x46\x3e\xd5\xfa\xea\x98\x44\x8c\x2f\x82\x9b\x31\x8a\xf3\xb7\x89\xd0\x0e\x28\xe4\x81\xa3\xcd\x82\xa3\x9e\x22\x9a\x1a\x68\xc6\x9b\x4a\x65\x68\x62\x80\x51\x1b\xb0\xcc\x50\x9c\x8c\x38\xa3\xfe\x98\xcc\x2c\xd5\x8b\xc5\xc4\x59\x57\xab\x40\xd6\x74\xa8\xd6\x7e\x1a\x18\x8f\x6a\x5d\x98\x4b\xa5\xed\x1b\x80\x17\x12\x43\xdc\x31\x97\x73\xb8\x97\x12\x00\xa8\xe4\x52\xf5\xe1\x8d\xf1\x78\x7c\x25\x27\x8d\xa4\x0a\x51\xf5\x61\x3b\xbe\x0b\x5a\x72\x16\xc2\x54\x73\xd2\xee\x75\xa1\xf7\x56\x17\xb6\x7b\xf6\xd7\xbb\xd8\x29\xc4\x23\xa2\x26\x4c\xb8\x23\x69\x8c\x8c\xfa\x70\x39\xbe\x5b\x70\x0c\xde\x35\x2e\xe1\x6c\x22\xfa\x40\x51\x18\x54\x05\x27\xad\x9f\x3e\x5c\xb8\xd4\x5b\x49\x4f\x91\x4d\xa6\xa6\xbf\x73\xa1\x42\x8b\x49\x18\x32\x31\x71\x8d\x8c\xfb\xb0\x5d\x32\x0e\xd6\x57\x13\xdf\xab\x39\xd3\x5f\x97\x34\x32\x76\x35\xd2\x34\xc5\x1e\x97\x13\x79\xaf\xe6\xc8\xf6\xb7\x2a\x36\x47\x84\xee\x4f\x94\x4c\x44\xd8\x87\x44\xf1\x76\x1e\x5b\xab\x65\x93\xd1\x01\x21\x5d\x85\x31\x12\xb3\x32\x31\xf0\xf3\x28\x0f\xfc\x6c\xf3\x0e\x46\x32\x5c\x40\x4a\x0c\x9c\x2a\xe2\x88\x13\xba\x7f\x25\xcb\x68\xc8\x66\x40\x39\xd1\x3a\x70\x6c\x31\x12\x26\x50\x81\x8e\x15\x92\xd0\x29\x74\x43\xa6\x63\x4e\x16\x7d\x10\x52\x60\xa6\xb7\xa6\x49\xc4\x8c\x68\xf7\x04\xc0\x70\xe0\x87\x6c\x76\x52\xbe\x12\x8a\x1c\x0d\x60\x40\x0a\xae\x5d\x65\x51\x54\x6f\x94\xfc\x3a\x82\x95\x71\xed\x4e\x87\x29\x0b\xb1\x22\x04\xf0\x5d\x36\xc3\x74\x6b\xdf\xc8\xf6\xd1\x4a\x7f\xe5\x8c\xfd\x20\xb9\x5f\x9b\x5d\xb4\x6b\x51\x92\x6b\x97\x28\x24\x2b\x27\x2b\x12\x65\xe6\x6b\xcb\xdc\x20\x63\x37\xfd\x89\x58\x8e\xb8\xa4\xfb\x57\xb2\xd4\x67\x25\xd8\xb0\xd2\x12\xc2\xa5\x32\x11\xc6\x19\xba\x35\x6b\x4d\xc2\xb6\xee\x6b\x61\x59\xfe\xed\x0f\x47\x87\x4f\x96\x0f\x3f\x3f\xfe\xf2\xeb\xa6\x90\x34\xac\xa2\x88\x45\x83\x87\x65\xa8\x34\x97\x73\x54\x0e\xa4\x27\x7d\xe0\x7c\x1f\xc3\x84\x22\x28\x69\x48\x5a\xf4\x3a\x46\x0c\x6b\x3e\x0d\x58\x81\xc1\x0a\xe5\xe1\xc0\x67\xc3\xcd\xfe\x35\x58\x4d\xf1\x11\x08\x35\x69\x9c\x73\xe3\x6f\x0b\x32\xe2\xe8\x87\x4c\xdb\x67\xe9\x44\xa3\xf9\x0c\xe5\x0c\xe6\xc7\x44\x9b\xca\xa2\xdf\x15\x54\x21\xd1\xaf\xbc\xec\x5c\xfd\x0c\xcb\x46\x6d\xcf\xde\x32\xd6\xf6\xab\x71\x71\x19\xf7\xb5\x6d\x30\x31\x96\x8d\xa0\x19\xb3\x19\xb3\xb1\x9c\x66\xa8\x74\x3d\x15\xb3\x9e\x77\xd1\xdb\xbe\x78\x52\xb1\x61\x73\xa6\x65\x4e\xed\x0e\x6a\xde\x99\x29\xdb\xb5\xed\xb8\x62\xc8\x75\xfb\xe9\x1f\xbc\x77\xe7\xda\x29\xd6\x56\x2f\x15\x54\x6d\xf3\xa9\x0d\xa3\xc5\x3e\x18\x70\x36\x1c\xe8\x98\x88\x93\x12\xae\x25\x3b\xc3\xa3\x87\x1f\x1c\xfd\xf6\xef\xc7\xbf\xf8\xf9\xd1\xc3\xbf\xf4\xed\x01\x1d\x13\x91\xab\xb0\x30\x70\x46\x68\x88\x33\x9c\xc1\xb6\xd7\xf3\x7a\x05\xd7\xe7\x6c\x08\xdf\x78\x45\x03\xc7\xff\xf8\xea\xf8\xab\x47\x47\x87\x4f\x5e\x1c\x3e\xde\x60\xc0\xca\xef\xaa\x44\x64\x51\x70\xab\x26\x5e\xcb\xc0\xf3\xc7\x8f\x9e\x3f\x7d\xda\x64\x40\x2f\x34\x97\xf6\xb4\x3f\x8b\x81\x6b\xb7\xde\x2b\xd0\x1b\xe0\x69\x9c\x9c\x1d\x7e\xf9\xd1\xfd\xe5\x5f\x7f\xf7\xec\xe9\xd7\xc7\x9f\x7e\xde\x68\x21\xc2\xe8\xec\x16\xde\x91\x37\x92\x08\xfa\xd0\x04\x3e\x91\x4a\x26\x86\x09\xdc\x15\x49\xf4\xff\x24\x61\xf9\xc9\x83\xe5\x97\x9f\x36\x66\x19\x75\x2c\x85\xae\xa4\x19\x22\xbd\x66\x84\xac\x8d\x91\x13\x66\xa6\xc9\x28\x1d\x1e\x23\x16\xca\x7d\xed\x4f\xa4\x1b\xef\xd8\xde\xac\x66\xe9\x99\x46\xd4\xc4\x8e\xe8\xbb\x23\x4e\xc4\x7e\xd9\xc3\xb2\x79\x4d\x61\xe8\xa4\xf6\x15\x86\x4c\x21\xb5\xad\x69\x98\x5f\x11\x8e\x7e\xf5\xd9\xf2\xfe\x67\x47\x1f\xff\x6c\xf9\xe0\x10\x06\xae\x6d\xb6\x85\x2f\x1b\xf7\x16\x13\xcc\x30\xc2\x5d\x9b\x86\x72\x7c\xa8\xb6\xf6\x01\x8b\x26\xa5\x70\x44\x26\xe8\xce\x15\x89\x63\xeb\xa4\x7f\xf2\x7c\xa8\x4b\x34\x4d\x21\x3a\x66\x42\x58\xfe\x86\x23\xc4\xae\x67\xfb\x94\xc6\x6e\xf9\x3b\x2f\xe1\x5f\x78\x09\xff\xe2\x4b\xf8\x97\xea\x9e\x9f\x3c\x9c\xb2\x7b\x4e\xc6\x9e\x11\x05\xb6\x10\xe6\x1a\x02\xf8\xe1\x8f\xae\x94\x44\x2a\x05\x4d\x94\xb2\xb7\x8c\x00\x7a\x2b\xba\x22\x22\xdc\xc7\xc5\x8a\xb0\x6f\x87\x7b\x83\xb6\x1d\xed\x6a\x43\x94\x95\x17\x09\xe7\x9b\x25\x50\x84\xa7\xf1\x37\xf3\x6e\x0a\xbe\x80\x00\x8c\x4a\x70\xc5\x89\x12\x0e\x01\x6c\x57\x5c\x9b\xeb\xef\x84\xa1\x85\x70\x9c\x8c\xc8\xc6\xd0\xe6\x92\xa6\xfd\xd4\x8b\x95\x34\x92\x4a\x0e\x41\x00\x79\x29\x3b\x9d\x62\x96\xae\xe8\xce\xb5\xad\x71\xe7\x7c\xa9\x38\x95\xda\x9c\x77\x7c\xa3\x08\xc5\xab\x2c\x0c\xe2\x9d\x38\x73\x36\xb7\x72\x00\xc8\x35\x96\xb7\x92\x2a\xd2\x6b\x02\xa5\xbf\x54\x0a\x2d\x39\xda\x51\xbf\x9d\x61\xa5\xd7\x95\x81\x9f\xa7\xed\xdc\xfb\x89\x4c\xc7\xf7\x3c\x8f\xa0\x15\x2d\x6f\x51\x7b\xc5\x25\x6a\x4f\x5f\x9d\x05\x97\x6d\x25\x9c\xaa\x56\x6c\x69\x1a\x0a\x6f\x4f\xa7\x17\x4d\xe5\x09\x34\xbe\x88\x23\x7f\xef\xfd\x04\xd5\xe2\xdb\x9c\x58\x2f\x4f\x81\xca\x2a\x69\x9c\x88\xec\x92\x92\xc4\x21\x31\x78\x9d\x18\xd2\xee\x94\x51\x61\xe3\xf6\x5a\x19\xb8\x27\x0a\x67\x78\xa1\xd7\xeb\xf5\xe0\xdc\x39\x30\x8b\x18\x65\x4d\xa3\x13\x04\x4e\x61\xa1\x92\xb6\x6a\xed\xb4\xcb\x6b\xdd\xc1\x56\xfe\x52\x54\xf7\x7a\x61\xbc\x56\x69\x40\x1d\xa2\x08\xd9\xc9\xc4\x4e\xd0\xdc\xb6\x92\xa5\x91\xb5\xca\xd8\x00\xf4\x8a\x38\xf9\xf3\x4d\x8f\xec\x91\xbb\xed\x15\x5e\xa2\x78\x7f\x05\xda\x2d\xe9\x76\x92\xb9\xb3\x88\xb1\x0f\xad\x3d\x2d\x45\x6b\xc5\xb1\x2d\x5d\x26\xa6\x0f\x36\xd6\x2b\xb2\x4e\x28\x45\xad\xfb\xab\x2c\xb6\x2d\x46\xa7\xe2\x3b\xc0\x9b\xed\xd6\x1b\xd5\xce\xdd\xea\x78\x53\x13\xf1\xf6\xf7\x88\x99\x7a\xe9\x1d\x31\x55\xf2\x68\x9c\x74\xe0\x3c\xb4\xe0\xad\x56\x99\x92\x9a\x7e\xde\x9a\x9b\xf4\x2d\x6f\x97\xcc\x26\xbb\x31\xaa\xd3\x81\xf2\x0e\xdc\x04\x14\x61\xf4\x72\x8c\x5a\xa3\x2d\x90\x52\xf5\x1a\x67\xb3\x72\x3e\x24\xd5\xd4\xb2\x2e\x58\xb0\x3a\x57\xb6\x2a\x8a\xab\x53\x35\x48\x65\x63\x44\xa5\xd7\x90\xbd\xf2\x36\x06\xde\xda\x2d\xae\x66\x27\xd5\xad\xb8\x75\xb0\x4a\x27\x95\x51\xcc\xd1\x60\x35\x9f\xf5\x5c\x6a\x34\x77\xb2\x52\x68\x37\x89\x40\x6d\x27\x57\x18\x07\x5d\xd8\xbe\xd4\xeb\x55\x4d\x17\x85\x9a\xd3\x0e\xb2\x47\x55\x3f\x0f\x83\xef\x1f\xfd\xfe\x27\x47\x87\x4f\x9e\xfd\xeb\xc1\x8b\xc3\x2f\x8e\x7f\xfa\x61\x4e\xb5\x0e\xbd\x2b\x0c\xaa\x19\xe1\xa5\x47\xed\x7c\x13\xfa\x7e\x19\xf5\x62\x68\x68\x75\x3c\xaa\x75\xbb\x95\xce\x14\xad\x6e\x33\xab\x13\x04\x2d\x35\x19\xb5\x77\x2e\x5d\xea\x42\xf1\xd3\x69\xc1\x55\x70\xd2\x49\xa4\x0f\xce\x7c\xca\x0c\x3a\x9d\xc2\xd4\x41\xf7\x42\xaf\xd7\xa9\x1e\xb9\x5b\x03\x7f\x24\xc3\xc5\x70\x6b\x6b\xe0\xa7\xff\xfb\xfc\x5f\x00\x00\x00\xff\xff\x3e\x6b\x34\x26\x0c\x15\x00\x00"

func indexTmplBytes() ([]byte, error) {
	return bindataRead(
		_indexTmpl,
		"index.tmpl",
	)
}

func indexTmpl() (*asset, error) {
	bytes, err := indexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.tmpl", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.tmpl": indexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"index.tmpl": &bintree{indexTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
